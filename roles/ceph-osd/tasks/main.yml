---
- name: verify disks have been provided
  fail: msg="please provide osd disks"
  when: ceph.disks is not defined

- name: install dependencies
  apt: pkg={{ item }}
       state=present
  with_items: ceph.osd_pkgs

- name: register ceph.keyring
  slurp: src=/var/lib/ceph/bootstrap-osd/ceph.keyring
  register: ceph_keyrings
  run_once: true
  delegate_to: "{{ groups['ceph_monitors'][0] }}"

- name: write ceph.keyring
  copy:
    dest: "{{ ceph_keyrings['source'] }}"
    content: "{{ ceph_keyrings['content'] | b64decode }}"

- name: check if 'ceph' partition exists on osd disks
  shell: "parted --script /dev/{{ item }} print | egrep -sq 'ceph'"
  with_items: ceph.disks
  ignore_errors: true
  changed_when: false
  register: ceph_partitions

# journal_collocation
- name: prepare osd disks
  command: ceph-disk prepare /dev/{{ item.1 }}
  with_together:
    - ceph_partitions.results
    - ceph.disks
  when: item.0.rc != 0

- name: activate osds
  command: ceph-disk activate /dev/{{ item.1 }}1
  with_together:
    - ceph_partitions.results
    - ceph.disks
  when: item.0.rc != 0

- name: start and add that the osd service(s) to the init sequence
  service: name=ceph
           state=started
           enabled=yes

- name: delete default 'rbd' pool
  command: ceph osd pool delete rbd rbd --yes-i-really-really-mean-it
  register: poolout
  changed_when: poolout.stdout | search('removed')
  run_once: true
  delegate_to: "{{ groups['ceph_monitors'][0] }}"

- name: create openstack vm pool if nova's backend is ceph
  ceph_pool:
    pool_name: "{{ ceph.vm_pool_name }}"
  register: pool_output
  run_once: true
  delegate_to: "{{ groups['ceph_monitors'][0] }}"
  when: nova.backend_ceph|bool

- name: create openstack pool
  ceph_pool:
    pool_name: "{{ ceph.pool_name }}"
  register: pool_output
  run_once: true
  delegate_to: "{{ groups['ceph_monitors'][0] }}"

- include: system_tuning.yml
  tags: ceph-osd
