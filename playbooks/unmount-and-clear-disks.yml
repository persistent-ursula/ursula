#
# This playbook preps a node for ceph/swift deployment with Ursula
# by unmounting and clearing specified drives in the env's all.yml
#
# Expects a hosts name as input into --extra-vars
#
# ex. ursula envs/example/swift playbooks/unmount-and-clear-disks.yml --extra-vars 'hosts=swiftnode'
#     ursula envs/example/standard playbooks/unmount-and-clear-disks.yml --extra-vars 'hosts=ceph_osds'
#

---
- name: unmount and clear all drives
  hosts: "{{ hosts }}"

  tasks:
  - name: install dependencies
    apt: pkg="gdisk"

  - name: define disk list
    set_fact: disk_list="{{ swift.disks | selectattr('disk', 'defined') | map(attribute='disk') | list }}"
    when: hosts == "swiftnode"

  - name: define disk list
    set_fact: disk_list="{{ ceph.disks }}"
    when: hosts == "ceph_osds"

  - name: define partition_paths
    set_fact: partition_paths="{{ swift.disks | selectattr('partition_path', 'defined') | map(attribute='partition_path') | list}}"

  - name: create list of disks present on node
    set_fact:
      disks_present: |
        {% set comma = joiner(",") %}
        [{% for item in hostvars[inventory_hostname]['ansible_devices'] -%}
            {{ comma() }}"{{ item }}"
        {%- endfor %}]

  - name: unmount all mounted devices
    mount: name={{ item[0].mount }} src={{ item[0].device }} fstype={{ item[0].fstype }} state=unmounted
    with_nested:
      - "{{ ansible_mounts }}"
      - disk_list
    when: (item[0].mount != "/" and item[0].mount != "/boot") and item[1] in "{{ item[0].device }}"

  - name: clean fstab for mounted devices
    mount: name={{ item[0].mount }} src={{ item[0].device }} fstype={{ item[0].fstype }} state=absent
    with_nested:
      - "{{ ansible_mounts }}"
      - disk_list
    when: (item[0].mount != "/" and item[0].mount != "/boot") and item[1] in "{{ item[0].device }}"

  - name: unmount partition_path
    mount: name={{ item[0].mount }} src={{ item[0].device }} fstype={{ item[0].fstype }} state=unmounted
    with_nested:
      - "{{ ansible_mounts }}"
      - partition_paths
    when: item[0].device == item[1] and hosts == "swiftnode"

  - name: clean fstab for partition_path
    mount: name={{ item[0].mount }} src={{ item[0].device }} fstype={{ item[0].fstype }} state=absent
    with_nested:
      - "{{ ansible_mounts }}"
      - partition_paths
    when: item[0].device == item[1] and hosts == "swiftnode"

  - name: destroy GPT structures
    shell: sgdisk --zap-all /dev/{{ item }}
    ignore_errors: true
    with_items: disk_list
    when: item in disks_present

  - name: clear all devices
    shell: dd if=/dev/zero of=/dev/{{ item }} bs=1M count=512
    ignore_errors: true
    with_items: disk_list
    when: item in disks_present

  - name: create GPT labels
    command: parted --script /dev/{{ item }} mklabel gpt
    with_items: disk_list
    when: item in disks_present
